// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

package openhmd

//#include <openhmd/openhmd.h>
//#cgo LDFLAGS: -lopenhmd
import "C"
import "errors"

// StringSize defines the maximum length of a string, including termination, in OpenHMD.
const StringSize = C.OHMD_STR_SIZE

const (
	statusCodeOkay             statusCode = C.OHMD_S_OK
	statusCodeUnknownError     statusCode = C.OHMD_S_UNKNOWN_ERROR
	statusCodeInvalidParameter statusCode = C.OHMD_S_INVALID_PARAMETER
	statusCodeUnsupported      statusCode = C.OHMD_S_UNSUPPORTED
	statusCodeInvalidOperation statusCode = C.OHMD_S_OPERATION
)

const (
	// StringValueVendor returns the name of the product's vendor.
	StringValueVendor StringValue = iota + 1

	//StringValueProduct returns the name of the product itself.
	StringValueProduct

	// StringValuePath returns the internal path of the device.
	StringValuePath
)

// A collection of string descriptions, returning Shader-related data.
const (
	StringDescriptionGlslDisortionVertSrc StringDescription = iota
	StringDescriptionGlslDisortionFragSRC
	StringDescriptionGsls330DisortionVertSrc
	StringDescriptionGsls330DisortionFragSrc
	StringDescriptionGslsEsDisortionVertSrc
	StringDescriptionGslsEsDisortionFragSrc
)

const (
	// ControlHintGeneric - Generic button pressed.
	ControlHintGeneric ControlHint = iota

	// ControlHintTrigger - Trigger pushed.
	ControlHintTrigger

	// ControlHintTriggerClick - Trigger "clicked" - defines that the Trigger has been pushed all the way in.
	ControlHintTriggerClick

	// ControlHintSqueeze - Grip button pressed.
	ControlHintSqueeze

	// ControlHintMenu - Menu button pressed.
	ControlHintMenu

	// ControlHintHome - Home button pressed.
	ControlHintHome

	// ControlHintAnalogX - Horizontal stick movement.
	ControlHintAnalogX

	// ControlHintAnalogY - Vertical stick movement.
	ControlHintAnalogY

	// ControlHintAnalogPress - Stick pressed.
	ControlHintAnalogPress

	// ControlHintButtonA - Button A pressed.
	ControlHintButtonA

	// ControlHintButtonB - Button B pressed.
	ControlHintButtonB

	// ControlHintButtonX - Button X pressed.
	ControlHintButtonX

	// ControlHintButtonY - Button Y pressed.
	ControlHintButtonY

	// ControlHintVolumePlus - Volume up button pressed.
	ControlHintVolumePlus

	// ControlHintVolumeMinus - Volume down button pressed.
	ControlHintVolumeMinus

	// ControlHintMicMute - Microphone mute button pressed.
	ControlHintMicMute
)

const (
	// ControlTypeDigital defines digital controls, like a button.
	ControlTypeDigital ControlType = iota

	// ControlTypeAnalog defines analog controls, like a analog stick.
	ControlTypeAnalog
)

const (
	// FloatValueRotationQuat defines the absolute rotation of the device, in space, as a quaternion.
	// Valid for GetFloat.
	// Returns 4 values: X, Y, Z, W.
	FloatValueRotationQuat FloatValue = iota + 1

	// FloatValueLeftEyeGlModelViewMatrix defines a "ready to use" OpenGL style 4x4 matrix with a modelview matrix for the left eye of the HMD.
	// Valid for GetFloat.
	// Returns 16 values.
	FloatValueLeftEyeGlModelViewMatrix FloatValue =

	// FloatValueRightEyeGlModelViewMatrix defines a "ready to use" OpenGL style 4x4 matrix with a modelview matrix for the right eye of the HMD.
	// Valid for GetFloat.
	// Returns 16 values.
	FloatValueRightEyeGlModelViewMatrix

	// FloatValueLeftEyeGlProjectionMatrix defines a "ready to use" OpenGL style 4x4 matrix with a projection matrix for the left eye of the HMD.
	// Valid for GetFloat.
	// Returns 16 values.
	FloatValueLeftEyeGlProjectionMatrix

	// FloatValueRightEyeGlProjectionMatrix defines a "ready to use" OpenGL style 4x4 matrix with a projection matrix for the right eye of the HMD.
	// Valid for GetFloat.
	// Returns 16 values.
	FloatValueRightEyeGlProjectionMatrix

	// FloatValuePositionVector defines a 3D vector representing the absolute position of the device, in space.
	// Valid for GetFloat.
	// Returns 3 values: X, Y, Z.
	FloatValuePositionVector

	// FloatValueScreenHorizontalSize defines the width of the device's screen in metres.
	// Valid for GetFloat.
	// Returns 1 value.
	FloatValueScreenHorizontalSize

	// FloatValueScreenVerticalSize defines the height of the device's screen in metres.
	// Valid for GetFloat.
	// Returns 1 value.
	FloatValueScreenVerticalSize

	// FloatValueLensHorizontalSeparation defines the separation of the device's lenses in metres.
	// Valid for GetFloat.
	// Returns 1 value.
	FloatValueLensHorizontalSeparation

	// FloatValueLensVerticalPosition defines the vertical position of the device's lenses in metres.
	// Valid for GetFloat.
	// Returns 1 value.
	FloatValueLensVerticalPosition

	// FloatValueLeftEyeFOV defines the field of view for the left eye in degrees.
	// Valid for GetFloat.
	// Returns 1 value.
	FloatValueLeftEyeFOV

	// FloatValueLeftEyeAspectRatio defines the aspect ratio of the screen for the left eye.
	// Valid for GetFloat.
	// Returns 1 value.
	FloatValueLeftEyeAspectRatio

	// FloatValueRightEyeFOV defines the field of view for the right eye in degrees.
	// Valid for GetFloat.
	// Returns 1 value.
	FloatValueRightEyeFOV

	// FloatValueRightEyeAspectRatio defines the aspect ratio of the screen for the right eye.
	// Valid for GetFloat.
	// Returns 1 value.
	FloatValueRightEyeAspectRatio

	// FloatValueEyeIPD defines the the interpupillary distance of the user's eyes in metres.
	// Valid for GetFloat and SetFloat.
	// Returns/Accepts 1 value.
	FloatValueEyeIPD

	// FloatValueProjectionZFar defines how far the projection matrix can be drawn on the screen.
	// Valid for GetFloat and SetFloat.
	// Returns/Accepts 1 value.
	FloatValueProjectionZFar

	// FloatValueProjectionZNear defines how near the projection matrix can be drawn on the screen. This can be, for example, be used for close clipping distance.
	// Valid for GetFloat and SetFloat.
	// Returns/Accepts 1 value.
	FloatValueProjectionZNear

	// FloatValueDistortionK defines the device-specific distortion value.
	// Valid for GetFloat.
	// Returns 6 values.
	FloatValueDistortionK

	// FloatValueExternalSensorFusion defines the use of performing sensor fusion on values from the external sensors.
	// Valid for SetFloat.
	// Returns 10 values: Date + Time, X, Y, Z (gyrometer), X, Y, Z (accelerometer), X, Y, Z (magnetometer).
	FloatValueExternalSensorFusion

	// FloatValueUniversalDistortionK defines the universal shader distortion coefficients, based on the Panorama Tools model.
	// Valid for GetFloat.
	// Returns 4 values: A, B, C, D.
	FloatValueUniversalDistortionK

	// FloatValueUniversalAberrationK defines the universal shader aberration coefficients, based on Post-Warp scaling.
	// Valid for GetFloat.
	// Returns 3 values: R, G, B.
	FloatValueUniversalAberrationK

	// FloatValueControlsState defines the state of the device's controls.
	// Valid for GetFloat.
	// Returns between 1 to 16 values, based on IntValueControlsCount.
	FloatValueControlsState
)

const (
	// IntValueScreenHorizontalResolution defines the horizontal resolution of the device's screen.
	// Valid for GetInt.
	// Returns 1 value.
	IntValueScreenHorizontalResolution IntValue = iota

	// IntValueScreenVerticalResolution defines the vertical resolution of the device's screen.
	// Valid for GetInt.
	// Returns 1 value.
	IntValueScreenVerticalResolution

	// IntValueDeviceClass returns the device's class, refer to DeviceClass for more information.
	// Valid For GetInt and ListGetInt.
	// Returns 1 value.
	IntValueDeviceClass

	// IntValueDeviceFlags returns the device's flags, refer to DeviceFlags for more information.
	// Valid For GetInt and ListGetInt.
	// Returns 1 value.
	IntValueDeviceFlags

	// IntValueControlsCount returns the count of controls for the device.
	// Valid for GetInt.
	// Returns 1 value.
	IntValueControlsCount

	// IntValueControlsHints returns which buttons are supported.
	// Valid for GetInt.
	// Returns between 1 to 16 values, based on IntValueControlsCount.
	IntValueControlsHints

	// IntValueControlsTypes returns whether a control entry is analog or digital.
	// Valid for GetInt.
	// Returns between 1 to 16 values, based on IntValueControlsCount.
	IntValueControlsTypes
)

const (
	// DataValueDriverData defines the use of setting specific data for the internal drivers.
	DataValueDriverData DataValue = iota

	// DataValueDriverProperties defines the use of setting properties of a device internally.
	DataValueDriverProperties
)

const (
	// IntSettingsIDsAutomaticUpdate allows OpenHMD to create background threads for automatic updating.
	// If this is set to 0, Update needs to be called at least 10 times per second.
	IntSettingsIDsAutomaticUpdate IntSettings = iota
)

const (
	// DeviceClassHMD defines a HMD.
	DeviceClassHMD DeviceClass = iota

	// DeviceClassController defines a motion controller.
	DeviceClassController

	// DeviceClassGenericTracker defines a simple tracker.
	DeviceClassGenericTracker
)

const (
	// DeviceFlagsNullDevice defines a dummy device.
	DeviceFlagsNullDevice DeviceFlags = 1

	// DeviceFlagsPositionalTracking defines a position-tracking device.
	DeviceFlagsPositionalTracking DeviceFlags = 2

	// DeviceFlagsRotationalTracking defines a rotation-tracking device.
	DeviceFlagsRotationalTracking DeviceFlags = 4

	// DeviceFlagsLeftController defines a left-sided motion controller.
	DeviceFlagsLeftController DeviceFlags = 8

	// DeviceFlagsRightController defines a right-sided motion controller.
	DeviceFlagsRightController DeviceFlags = 16
)

var (
	// ErrorUnknownError defines a return value that hasn't been specifically checked for.
	ErrorUnknownError = errors.New("Unknown error")

	// ErrorInvalidParameter gets returned if invalid parameters have been given.
	// Note that this is also used if too many entries are supplied, so GetFloat and GetInt, SetFloat and SetInt only return or accept 16 or less values.
	ErrorInvalidParameter = errors.New("Invalid parameter")

	// ErrorUnsupported defines either an unsupported version or action.
	ErrorUnsupported = errors.New("Unsupported version")

	// ErrorInvalidOperation defines a denied or invalid operation.
	ErrorInvalidOperation = errors.New("Invalid operation")
)
