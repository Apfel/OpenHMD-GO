// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

package openhmd

import "testing"

func TestCreateContext(t *testing.T) {
	if ctx := CreateContext(); ctx == nil {
		t.Fatal("Got nil Context.")
	}
}

func TestProbe(t *testing.T) {
	if ctx := CreateContext(); ctx == nil {
		t.Fatal("Got nil Context.")
	} else if ctx.Probe() == 0 {
		t.Fatal("Got invalid count (0)")
	}
}

func TestCreateSettings(t *testing.T) {
	if ctx := CreateContext(); ctx == nil {
		t.Fatal("Got nil Context.")
	} else if settings := ctx.CreateSettings(); settings == nil {
		t.Fatal("Got nil Settings.")
	}
}

func TestListOpenDevice(t *testing.T) {
	if ctx := CreateContext(); ctx == nil {
		t.Fatal("Got nil Context.")
	} else if ctx.Probe() == 0 {
		t.Fatal("Got invalid count (0)")
	} else if dev := ctx.ListOpenDevice(0); dev == nil {
		t.Fatal("Got nil Device.")
	}
}

func TestListOpenDeviceSettings(t *testing.T) {
	if ctx := CreateContext(); ctx == nil {
		t.Fatal("Got nil Context.")
	} else if ctx.Probe() == 0 {
		t.Fatal("Got invalid count (0)")
	} else if settings := ctx.CreateSettings(); settings == nil {
		t.Fatal("Got nil Settings.")
	} else if dev := ctx.ListOpenDeviceSettings(0, settings); dev == nil {
		t.Fatal("Got nil Device.")
	}
}

func TestGetString(t *testing.T) {
	text, err := GetString(StringDescriptionGlslDisortionFragSRC)
	if err != nil {
		t.Fatalf("Got error: %s", err.Error())
	}

	t.Logf("Got text successfully: %s", text)
}

// TODO: Implement GetFloat/Int and SetFloat/Int as well as SetData
